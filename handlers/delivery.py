from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards.inline import get_delivery_info_keyboard, get_main_menu_keyboard, get_delivery_destinations_keyboard
from config import ADMIN_ID, DB_FILE
from database.database import Database

router = Router()
db = Database(DB_FILE)

delivery_conditions = """
–£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞ / –∫–æ–º–∏—Å—Å–∏—è –∑–∞ —É—Å–ª—É–≥–∏:
(–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä)

–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å—É–º–º–µ, –æ—Ç 1-—É–ø–∞–∫–æ–≤–æ–∫ (–ª–∏–Ω–∏–µ–π)

–î–æ $99 - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è 600 —Å–æ–º

–û—Ç $140 - 6% –æ—Ç —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–µ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ - –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è)

–û—Ç $999 - —Ç–æ—Ä–≥—É–µ–º–æ (—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞) ü§ù

–í—ã—à–µ $1999 - –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –Ω–∏–∂–Ω–∏—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω ü•≥

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤—ã–∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –¥–æ –º–æ–º–µ–Ω—Ç–∞ —Å–¥–∞—á–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫—É (–µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–æ–º (–∫–æ–º–∞–Ω–¥–∞ –∏–∑ –±–æ–ª–µ–µ 200 —á–µ–ª–æ–≤–µ–∫) –§—ç—à–Ω –†—ã–Ω–æ–∫ - —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–≤–æ–¥–∞ / –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ (WhatsApp & Telegram) –≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–º–µ—Ä–∞ wa.me/996500996500, wa.me/996501996501, @marketplacekg, @marketplace_kg

–û—Ç 10.12.2024 ¬©Ô∏è –õ–∏–¥–µ—Ä –∫–æ–º–∞–Ω–¥—ã - –ö–∞–π—Ä–∞—Ç –ú.–ú.
"""

@router.callback_query(F.data == "delivery_info")
async def delivery_info_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ"."""
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=get_delivery_info_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("delivery_country_"))
async def delivery_country_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ —Å—Ç—Ä–∞–Ω–æ–π."""
    country = callback.data.split("_", 2)[2]
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=get_delivery_destinations_keyboard(country))
    await callback.answer()

@router.callback_query(F.data.startswith("delivery_city_"))
async def delivery_city_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≥–æ—Ä–æ–¥–æ–º."""
    city = callback.data.split("_", 2)[2]
    tariffs = db.get_tariffs_by_city(city)
    if not tariffs:
        await callback.message.edit_text(f"–¢–∞—Ä–∏—Ñ—ã –¥–ª—è {city} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    message_text = f"–í {city}\n\n"  # –ò–∑–º–µ–Ω–µ–Ω–æ: –£–±—Ä–∞–Ω–æ "–¢–ö ALPHA cargo", "–ü—Ä–∞–π—Å"
    for tariff_type, delivery_time, cost_per_kg, fixed_cost in tariffs:
        if "add_tariff" in tariff_type:
          continue
        message_text += f"{tariff_type} - 1–∫–≥ {cost_per_kg}‚ÇΩ\n"
        message_text = message_text.replace(".0", "")  # –£–¥–∞–ª—è–µ–º .0 –∏–∑ —á–∏—Å–µ–ª

        # –î–æ–±–∞–≤–ª—è–µ–º "+3 –¥–Ω—è" –∫ —Å—Ä–æ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω –º–µ–Ω—å—à–µ 8
        delivery_time_parts = delivery_time.split("-")
        if len(delivery_time_parts) == 1:
          if int(delivery_time) < 8:
            delivery_time = str(int(delivery_time) + 3)
        elif len(delivery_time_parts) == 2:
          if int(delivery_time_parts[0]) < 8 :
            delivery_time = f"{int(delivery_time_parts[0]) + 3}-{int(delivery_time_parts[1]) + 3}"

        message_text += f"\n–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_time} –¥–Ω–µ–π\n"
        if fixed_cost:
          message_text += f"–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10–∫–≥. —Ç–æ —Å—Ç–∞–≤–∏—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ {int(fixed_cost)}‚ÇΩ"

    await callback.message.edit_text(message_text, reply_markup=get_delivery_info_keyboard())
    await callback.answer()

@router.callback_query(F.data == "back_to_delivery_info")
async def back_to_delivery_info_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã."""
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=get_delivery_info_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("delivery_to_"))
async def delivery_to_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏."""
    country = callback.data.split("_", 2)[2]
    if country == "–£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞":
        await callback.message.edit_text(delivery_conditions, reply_markup=get_main_menu_keyboard())
    await callback.answer()

@router.callback_query(F.data == "fulfillment")
async def fulfillment_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç"."""
    await callback.message.edit_text("–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç: https://docs.google.com/spreadsheets/d/1gDCRZgYMpOTdctAuMSz7quEjo4Y6REnqD_jJIhGURB8/edit?usp=sharing", reply_markup=get_main_menu_keyboard())
    await callback.answer()

@router.message(F.text.startswith("/delete_delivery"))
async def delete_delivery_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_delivery."""
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        _, city_to_delete = message.text.split(maxsplit=1)

        db.cursor.execute("SELECT city FROM delivery WHERE city=?", (city_to_delete,))
        result = db.cursor.fetchone()
        if result:
            city_to_delete = result[0]
            db.delete_delivery_tariff("–†–æ—Å—Å–∏—è", city_to_delete)
            await message.answer(f"–¢–∞—Ä–∏—Ñ –¥–ª—è {city_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            await message.answer(f"–¢–∞—Ä–∏—Ñ –¥–ª—è {city_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–∏–±–æ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    except (ValueError, TypeError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /delete_delivery [–≥–æ—Ä–æ–¥].")

@router.message(F.text.startswith("/add_tariff"))
async def add_tariff_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_tariff."""
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if message.text == "/add_tariff":
        await message.answer("""–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
[–ì–æ—Ä–æ–¥]
–¢–∏–ø
[–¢–∏–ø —Ç–æ–≤–∞—Ä–∞]
–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: [–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏]
–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–≥: [–°—Ç–æ–∏–º–æ—Å—Ç—å]
–ü—Ä–∏–º–µ—Ä:
–ú–æ—Å–∫–≤–∞
–¢–∏–ø
–ü–æ—à–∏–≤
–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 5
–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–≥: 50""") # –ò–∑–º–µ–Ω–µ–Ω–æ: –£–±—Ä–∞–Ω–æ "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        return

    lines = message.text.strip().split('\n')
    if len(lines) != 5 or lines[1] != "–¢–∏–ø" or not lines[3].startswith("–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:") or not lines[4].startswith("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–≥:"):
        await message.answer("""–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
–ü—Ä–∏–º–µ—Ä:
–ú–æ—Å–∫–≤–∞
–¢–∏–ø
–ü–æ—à–∏–≤
–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 5
–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–≥: 50""") # –ò–∑–º–µ–Ω–µ–Ω–æ: –£–±—Ä–∞–Ω–æ "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        return

    try:
        city = lines[0]
        tariff_type = lines[2]
        delivery_time = lines[3].split(": ")[1]
        cost_per_kg = float(lines[4].split(": ")[1].replace("‚ÇΩ", ""))
        fixed_cost = 1060 # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å 1060

        if int(delivery_time) < 8 and "-" not in delivery_time:
            delivery_time = f"{delivery_time}-{int(delivery_time) + 3}"
        elif "-" in delivery_time:
            delivery_time_parts = delivery_time.split("-")
            if int(delivery_time_parts[0]) < 8 :
              delivery_time = f"{int(delivery_time_parts[0]) + 3}-{int(delivery_time_parts[1]) + 3}"
        
        db.add_delivery_tariff("–†–æ—Å—Å–∏—è", city, tariff_type, delivery_time, cost_per_kg, fixed_cost)

        if db.cursor.rowcount > 0:
          await message.answer(f"–¢–∞—Ä–∏—Ñ –¥–ª—è {city} —Å —Ç–∏–ø–æ–º {tariff_type} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        else:
          await message.answer(f"–¢–∞—Ä–∏—Ñ –¥–ª—è {city} —Å —Ç–∏–ø–æ–º {tariff_type} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞: {e}")
